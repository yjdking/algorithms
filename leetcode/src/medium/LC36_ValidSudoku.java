package medium;

/**
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 *
 * 上图是一个部分填充的有效的数独。数独部分空格内已填入了数字，空白格用 '.' 表示。
 *
 * 示例 1:
 * 输入:
 * [
 *   ["5","3",".",".","7",".",".",".","."],
 *   ["6",".",".","1","9","5",".",".","."],
 *   [".","9","8",".",".",".",".","6","."],
 *   ["8",".",".",".","6",".",".",".","3"],
 *   ["4",".",".","8",".","3",".",".","1"],
 *   ["7",".",".",".","2",".",".",".","6"],
 *   [".","6",".",".",".",".","2","8","."],
 *   [".",".",".","4","1","9",".",".","5"],
 *   [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: true
 *
 *
 * 示例 2:
 * 输入:
 * [
 *   ["8","3",".",".","7",".",".",".","."],
 *   ["6",".",".","1","9","5",".",".","."],
 *   [".","9","8",".",".",".",".","6","."],
 *   ["8",".",".",".","6",".",".",".","3"],
 *   ["4",".",".","8",".","3",".",".","1"],
 *   ["7",".",".",".","2",".",".",".","6"],
 *   [".","6",".",".",".",".","2","8","."],
 *   [".",".",".","4","1","9",".",".","5"],
 *   [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: false
 * 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 *      但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 * 说明:
 *
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 给定数独序列只包含数字 1-9 和字符 '.' 。
 * 给定数独永远是 9x9 形式的。
 */

import java.util.HashSet;

/**
 * @ClassName: LC36_ValidSudoku
 * @Description: 有效的数独
 * @Author: 余佳东
 * @Date: 2018-12-18 14:47
 * @Version: V1.0
 **/
public class LC36_ValidSudoku {
    /**
     * @Description: 每种情况遍历；43 ms, 在Valid Sudoku的Java提交中击败了25.83% 的用户。用Hashset遍历去重
     * @Param: [board]
     * @Return: boolean
     */
    public boolean isValidSudoku(char[][] board) {
        for (int i = 0; i < board.length; i++) {

            HashSet<Character> setRow = new HashSet<>();
            HashSet<Character> setColumn = new HashSet<>();


            for (int j = 0; j < board.length; j++) {

                if(board[j][i] != '.'){
                    if (setColumn.contains(board[j][i])) {
                        // System.out.println("i: " + i + ", j: " + j);
                        return false;
                    } else {
                        setColumn.add(board[j][i]);
                    }
                }

                if(board[i][j] != '.') {
                    if (setRow.contains(board[i][j])) {
                        // System.out.println("i: " + i + ", j: " + j);
                        return false;
                    } else {
                        setRow.add(board[i][j]);
                    }
                }
            }

            int y = i % 3 * 3;
            int x = i / 3 * 3;

            HashSet<Character> block = new HashSet<>();
            for (int k = x; k < x + 3; k++) {
                for (int l = y; l < y + 3; l++) {
                    if(board[k][l] != '.') {
                        if (block.contains(board[k][l])) {
                            System.out.println("k: " + k + ", l: " + l);
                            return false;
                        } else {
                            block.add(board[k][l]);
                        }
                    }
                }
            }
        }

    return true;
    }

    public static void main(String[] args) {
        char[][] ch = {
                {'8', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '2', '.', '.', '.', '.', '6', '.'},
                {'1', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
        };


        char[][] ch1 = {
                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
        };
        System.out.println(new LC36_ValidSudoku().isValidSudoku(ch1));
    }
}
